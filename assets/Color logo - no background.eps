%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2358 422
%%HiResBoundingBox: 0 0 2357.04 421.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2357.04 421.91998 re
W
q
[0.24 0 0 -0.24 0 421.91998] cm
q
0 0 9820.833 1756.6227 re
W*
q
[25.681814 0 0 25.680387 187.00459 202.25136] cm
q
18.799999 34.959999 m
21.519999 34.959999 l
19.759998 38.16 16.359999 40.399998 12.479999 40.399998 c
6.799999 40.399998 1.359999 36.599998 1.359999 30.439999 c
1.359999 23.679998 6.799999 20.359999 12.479999 20.359999 c
13.479999 20.359999 l
16.879999 20.359999 20.039999 22.559999 21.399998 25.679998 c
17.039997 25.679998 l
15.399997 23.159998 13.199997 21.799999 10.999997 21.799999 c
7.879997 21.799999 6.079997 24.559999 6.079997 28.08 c
6.079997 34.16 10.359997 39.360001 14.079997 39.360001 c
16.479998 39.360001 18.239998 37.48 18.799997 34.959999 c
18.799999 34.959999 l
h
22.16 30.16 m
22.16 28.52 l
33.84 28.52 l
33.84 30.16 l
22.16 30.16 l
h
35.560001 40 m
35.560001 38.919998 l
36.760002 37.519997 37.480003 35.599998 37.480003 33.68 c
37.480003 18.360001 l
37.480003 16.44 36.760002 14.56 35.600002 13.200001 c
35.600002 12.000001 l
41.480003 12.000001 l
41.480003 33.720001 l
41.480003 35.600002 42.200005 37.52 43.440002 38.920002 c
43.440002 40.000004 l
35.560001 40.000004 l
35.560001 40 l
h
62.360001 33.880001 m
65.32 33.880001 l
63.919998 37.68 60.239998 40.400002 55.799999 40.400002 c
50.16 40.400002 45.68 35.880001 45.68 30.440002 c
45.68 24.880003 50.16 20.360003 55.799999 20.360003 c
61.360001 20.360003 65.879997 24.760002 65.959999 30.240002 c
49.720001 30.240002 l
49.880001 30.720001 49.960003 31.240002 50.120003 31.800001 c
51.400002 36.200001 54.440002 39.360001 57.520004 39.360001 c
60.400005 39.360001 61.960003 36.639999 62.360004 33.880001 c
62.360001 33.880001 l
h
49.52 28.6 m
61.799999 28.6 l
60.439999 24.440001 57.239998 21.799999 54.239998 21.799999 c
51.199997 21.799999 49.479996 24.719999 49.479996 27.719999 c
49.479996 28 49.479996 28.32 49.519997 28.599998 c
49.52 28.6 l
h
75 40 m
68.959999 24.560001 l
68.799995 24.160002 68.68 23.960001 68.440002 23.680002 c
66.68 21.800003 l
66.68 20.680002 l
74.199997 20.680002 l
74.199997 21.800003 l
73.639999 23.000004 l
73.32 23.680004 73.32 24.440004 73.599998 25.200005 c
78.599998 37.880005 l
83.68 24.720005 l
84.040001 23.720005 83.840004 22.600006 83.160004 21.920006 c
83.160004 20.680006 l
87.920006 20.680006 l
87.920006 21.920006 l
86.400009 22.920006 l
85.920006 23.240005 85.600006 23.720005 85.44001 24.160006 c
79.320007 40.000008 l
75.000008 40.000008 l
75 40 l
h
105.160004 33.880001 m
108.120003 33.880001 l
106.720001 37.68 103.040001 40.400002 98.600006 40.400002 c
92.960007 40.400002 88.480003 35.880001 88.480003 30.440002 c
88.480003 24.880003 92.960007 20.360003 98.600006 20.360003 c
104.160004 20.360003 108.680008 24.760002 108.76001 30.240002 c
92.520012 30.240002 l
92.680016 30.720001 92.76001 31.240002 92.920013 31.800001 c
94.200012 36.200001 97.240013 39.360001 100.320015 39.360001 c
103.200012 39.360001 104.760017 36.639999 105.160019 33.880001 c
105.160004 33.880001 l
h
92.32 28.6 m
104.599998 28.6 l
103.239998 24.440001 100.040001 21.799999 97.040001 21.799999 c
94 21.799999 92.279999 24.719999 92.279999 27.719999 c
92.279999 28 92.279999 28.32 92.32 28.599998 c
92.32 28.6 l
h
110.559998 40 m
110.559998 38.919998 l
111.759995 37.519997 112.479996 35.599998 112.479996 33.68 c
112.479996 18.360001 l
112.479996 16.44 111.759995 14.56 110.599998 13.200001 c
110.599998 12.000001 l
116.479996 12.000001 l
116.479996 33.720001 l
116.479996 35.600002 117.199997 37.52 118.439995 38.920002 c
118.439995 40.000004 l
110.559998 40.000004 l
110.559998 40 l
h
W
[117.079995 0 0 28.400002 1.359998 11.999996] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.258 mul 0.318 add
1 index 1 exp 0.27 mul 0.314 add
2 index 1 exp 0.286 mul 0.31 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.258 mul 0.576 add
1 index 1 exp -0.27 mul 0.584 add
2 index 1 exp -0.286 mul 0.596 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
q
[5.291634 0 0 5.29134 3618.4839 86.991501] cm
q
64.300003 132.100006 m
143.100006 268.60001 l
144.300003 270.80002 142.800003 273.60001 140.200012 273.60001 c
83.599998 273.60001 l
80.400002 273.60001 77.5 271.89999 75.799995 269.10001 c
9.4 154 l
7.8 151.300003 7.8 147.800003 9.4 145.100006 c
26.799999 115 l
26.9 115 l
48.400002 77.800003 l
48.300003 77.800003 l
64.200005 50.300003 l
77.300003 27.700003 109.700005 26.300003 124 48.100002 c
124.300003 48.600002 124.599998 49.000004 124.900002 49.500004 c
210.39999 197.5 l
210.5 197.60001 210.59999 197.7 210.59999 197.8 c
220.79999 215.2 245.89999 214.90001 256 197.5 c
263.70001 184.2 l
252.10001 183.59999 241.60001 177.3 235.80002 167.099991 c
157 30.5 l
155.800003 28.299999 157.300003 25.5 159.899994 25.5 c
216.39999 25.5 l
219.59999 25.5 222.5 27.200001 224.2 30 c
290.60001 145 l
292.20001 147.699997 292.20001 151.199997 290.60001 153.899994 c
282.89999 167.199997 l
243.8 235 l
235.40001 249.5 l
222.3 272.10001 189.70001 273.10001 175.90001 250.89999 c
175.70001 250.5 175.3 250 175.10001 249.59999 c
89.600006 101.599991 l
89.500008 101.499992 89.400009 101.399994 89.400009 101.299988 c
79.200012 83.999985 54.10001 84.299988 44.10001 101.599991 c
36.299999 115 l
48 115.599998 58.5 122 64.300003 132.100006 c
h
W
[283.600001 0 0 248.100008 8.200004 25.499991] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.00141 def
/yMin 0 def
/xMax 1.00141 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.258 mul 0.318 add
1 index 1 exp 0.27 mul 0.314 add
2 index 1 exp 0.286 mul 0.31 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.258 mul 0.576 add
1 index 1 exp -0.27 mul 0.584 add
2 index 1 exp -0.286 mul 0.596 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
-0.00141 1.00141 0 axialSH
Q
Q
q
[26.933661 0 0 26.932161 5220.5664 187.23004] cm
q
14.64 38.360001 m
14.64 35.52 l
15.96 35.52 l
17.52 37.200001 l
18.560001 38.32 19.800001 38.760002 21.560001 38.720001 c
23.160002 38.720001 25.600002 38.120003 25.600002 36.639999 c
25.600002 34.759998 21.960003 32.48 19.800003 31.199999 c
17.920004 30.119999 14.640003 28.239998 14.640003 25.959999 c
14.640003 21.599998 19.720003 20.519999 21.200003 20.519999 c
23.080002 20.519999 24.960003 20.959999 26.960003 21.879999 c
26.960003 24.639999 l
25.520002 24.639999 l
24.360003 23.32 l
23.520002 22.360001 22.320004 21.719999 21.000002 21.76 c
19.800001 21.76 17.560001 22.68 17.560001 24.08 c
17.560001 25.719999 21.440002 26.959999 25.480001 29.719999 c
27.920002 31.359999 29.040001 33.399998 29.040001 35.239998 c
29.040001 37.879997 26.800001 40.119999 22.960001 40.119999 c
17.960001 40.119999 14.640001 38.360001 14.640001 38.360001 c
14.64 38.360001 l
h
48.279999 33.880001 m
51.239998 33.880001 l
49.839996 37.68 46.159996 40.400002 41.719997 40.400002 c
36.079998 40.400002 31.599998 35.880001 31.599998 30.440002 c
31.599998 24.880003 36.079998 20.360003 41.719997 20.360003 c
47.279999 20.360003 51.799995 24.760002 51.879997 30.240002 c
35.639999 30.240002 l
35.799999 30.720001 35.880001 31.240002 36.040001 31.800001 c
37.32 36.200001 40.360001 39.360001 43.440002 39.360001 c
46.320004 39.360001 47.880001 36.639999 48.280003 33.880001 c
48.279999 33.880001 l
h
35.439999 28.6 m
47.719997 28.6 l
46.359997 24.440001 43.159996 21.799999 40.159996 21.799999 c
37.119995 21.799999 35.399994 24.719999 35.399994 27.719999 c
35.399994 28 35.399994 28.32 35.439995 28.599998 c
35.439999 28.6 l
h
53.919998 40 m
53.919998 39 l
55.279999 37.52 55.959999 35.68 55.959999 33.68 c
55.959999 27.08 l
55.959999 25.119999 55.279999 23.24 53.919998 21.84 c
53.919998 20.68 l
60.359997 20.68 l
60.359997 22.76 l
61.599998 21.52 63.959995 20.559999 65.599998 20.559999 c
67.32 20.559999 68.519997 21.199999 68.519997 21.199999 c
67.68 24.839998 l
67.68 24.839998 65.879997 23.359999 63.68 23.359999 c
60.760002 23.359999 60.360001 25.32 60.360001 25.839998 c
60.360001 33.68 l
60.360001 35.68 61.119999 37.52 62.400002 39 c
62.400002 40 l
53.920002 40 l
53.919998 40 l
h
77.919998 40 m
71.879997 24.560001 l
71.719994 24.160002 71.599998 23.960001 71.360001 23.680002 c
69.599998 21.800003 l
69.599998 20.680002 l
77.119995 20.680002 l
77.119995 21.800003 l
76.559998 23.000004 l
76.239998 23.680004 76.239998 24.440004 76.519997 25.200005 c
81.519997 37.880005 l
86.599998 24.720005 l
86.959999 23.720005 86.760002 22.600006 86.080002 21.920006 c
86.080002 20.680006 l
90.840004 20.680006 l
90.840004 21.920006 l
89.320007 22.920006 l
88.840004 23.240005 88.520004 23.720005 88.360008 24.160006 c
82.240005 40.000008 l
77.920006 40.000008 l
77.919998 40 l
h
92.68 40 m
92.68 38.919998 l
93.800003 37.519997 94.400002 35.599998 94.400002 33.68 c
94.400002 27.040001 l
94.400002 25.080002 93.800003 23.200001 92.68 21.800001 c
92.68 20.68 l
98.199997 20.68 l
98.199997 33.720001 l
98.199997 35.600002 98.839996 37.52 100 38.920002 c
100 40.000004 l
92.68 40.000004 l
92.68 40 l
h
95.760002 18.92 m
94.240005 18.92 93 17.639999 93 16.120001 c
93 14.560001 94.239998 13.320001 95.760002 13.320001 c
97.32 13.320001 98.560005 14.56 98.560005 16.120001 c
98.560005 17.640001 97.320007 18.92 95.760002 18.92 c
h
120 34.959999 m
122.720001 34.959999 l
120.959999 38.16 117.559998 40.399998 113.68 40.399998 c
108 40.399998 102.559998 36.599998 102.559998 30.439999 c
102.559998 23.679998 108 20.359999 113.68 20.359999 c
114.68 20.359999 l
118.080002 20.359999 121.239998 22.559999 122.599998 25.679998 c
118.239998 25.679998 l
116.599998 23.159998 114.399994 21.799999 112.199997 21.799999 c
109.079994 21.799999 107.279999 24.559999 107.279999 28.08 c
107.279999 34.16 111.559998 39.360001 115.279999 39.360001 c
117.68 39.360001 119.440002 37.48 120 34.959999 c
h
141.759995 33.880001 m
144.720001 33.880001 l
143.320007 37.68 139.639999 40.400002 135.199997 40.400002 c
129.559998 40.400002 125.079994 35.880001 125.079994 30.440002 c
125.079994 24.880003 129.559998 20.360003 135.199997 20.360003 c
140.759995 20.360003 145.279999 24.760002 145.360001 30.240002 c
129.119995 30.240002 l
129.279999 30.720001 129.360001 31.240002 129.519989 31.800001 c
130.799988 36.200001 133.839996 39.360001 136.919983 39.360001 c
139.799988 39.360001 141.359985 36.639999 141.759979 33.880001 c
141.759995 33.880001 l
h
128.919998 28.6 m
141.199997 28.6 l
139.839996 24.440001 136.639999 21.799999 133.639999 21.799999 c
130.600006 21.799999 128.880005 24.719999 128.880005 27.719999 c
128.880005 28 128.880005 28.32 128.919998 28.599998 c
128.919998 28.6 l
h
148.160004 38.360001 m
148.160004 35.52 l
149.480011 35.52 l
151.040009 37.200001 l
152.080002 38.32 153.320007 38.760002 155.080002 38.720001 c
156.680008 38.720001 159.119995 38.120003 159.119995 36.639999 c
159.119995 34.759998 155.479996 32.48 153.319992 31.199999 c
151.439987 30.119999 148.159988 28.239998 148.159988 25.959999 c
148.159988 21.599998 153.23999 20.519999 154.719986 20.519999 c
156.599991 20.519999 158.47998 20.959999 160.47998 21.879999 c
160.47998 24.639999 l
159.039978 24.639999 l
157.879974 23.32 l
157.039978 22.360001 155.839981 21.719999 154.519974 21.76 c
153.319977 21.76 151.079971 22.68 151.079971 24.08 c
151.079971 25.719999 154.959976 26.959999 158.999969 29.719999 c
161.439972 31.359999 162.559967 33.399998 162.559967 35.239998 c
162.559967 37.879997 160.319962 40.119999 156.479965 40.119999 c
151.479965 40.119999 148.159973 38.360001 148.159973 38.360001 c
148.160004 38.360001 l
h
W
[147.919967 0 0 27.080003 14.640012 13.320002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.258 mul 0.318 add
1 index 1 exp 0.27 mul 0.314 add
2 index 1 exp 0.286 mul 0.31 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.258 mul 0.576 add
1 index 1 exp -0.27 mul 0.584 add
2 index 1 exp -0.286 mul 0.596 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
